
import random
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageToEditNotFound
from aiogram import Dispatcher, Bot, types, executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, InputMedia, InputMediaAnimation, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, Message, PreCheckoutQuery
from keyboards import kb_main_menu, ikb_faq, ikb_main_menu, ikb_ready_to_buy, ikb_rev_luke, ikb_buy, ikb_small_luke, ikb_midle_luke, ikb_big_luke, ikb_recomanded_rl, ikb_vibrati_var, ikb_recomanded_buy, ikb_san_uzel, ikb_oformiti_zakaz, ikb_chertej, ikb_oplata

from config import TOKEN_API
from All_products import rev_luks


bot = Bot(TOKEN_API)
dp = Dispatcher(bot)

# images = ['https://i.pinimg.com/originals/8a/de/fe/8adefe5af862b4f9cec286c6ee4722cb.jpg', 'https://img3.akspic.ru/previews/7/4/2/8/6/168247/168247-kosti_3d-igra_v_kosti_3d-azartnaya_igra-pitevaya_igra-kazino-500x.jpg', 'https://img1.akspic.ru/previews/7/4/7/9/6/169747/169747-ikanvas-art-pechat_na_holste-poster-oblako-500x.jpg' , 'https://mobimg.b-cdn.net/v3/fetch/94/94c56e15f13f1de4740a76742b0b594f.jpeg']

last_message_id = None
last_photo_id = None



vibrannii_tovar = None


HELP_COMMAND = '''
<b>/start</b> - <em>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>
<b>/description</b> - <em>–û–ø–∏—Å–∞–Ω–∏–µ</em>
<b>/help</b> - <em>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>'''

DESCRIPTION = '''
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–∏–∏ SanFlow, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —á—Ç–æ –ø—Ä–æ–¥–∞—ë–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤'''


korzina = []


arr_photos_razmeri = ['media\\Small_luke.mp4',
                    'media\\midle_luke.mp4',
                    'media\\big_luke.mp4']

captions_photos_razmeri = ['–õ—é–∫–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n200x200 - 500x400','–õ—é–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n400x600 - 600x700','–õ—é–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n400x900 - 600x1200']
current_photo_index = 0


photo_shema = ['https://shag-ma.ru/upload/resize_cache/iblock/fc4/1500_1500_0/bruyzuwd05sw2e6acys8t587v05ivnqy.jpg', 
               'https://shag-ma.ru/upload/iblock/e80/34kqycldpbwzm1dgpgasoj1s44n5urj3.jpg', 
               'https://shag-ma.ru/upload/iblock/fda/ckpn4rq9nz1y5mmdlh3sgx1hkou7iq09.jpg']
curr_photo_shema_index = 0


photo_recomanded = ['https://shag-ma.ru/upload/iblock/ed7/zms8qt3kmh4pczm9b5ldoj2ivusmgnif.jpg', 
               'https://shag-ma.ru/upload/iblock/b3f/rn6fu5vqpgr3s956ni6lnxv922an5bs4.jpg', 
               'https://shag-ma.ru/upload/resize_cache/iblock/0e8/1500_1500_0/cxnjayzxo8cq94p8q25r92inqmdaeww2.jpg']
curr_photo_recomanded_index = 0

async def start_on(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!!')


def get_products_from_cart(user_id):
    global korzina
    if len(korzina) != 0:
        return korzina
    else:
        return []


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.chat.id, "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è SanFlow –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=kb_main_menu)
    with open('media/photo_2023-03-09_22-37-54.jpg', 'rb') as photo_logo:
        await bot.send_photo(message.chat.id, photo=photo_logo, reply_markup=ikb_main_menu)
    await message.delete()



@dp.message_handler(Text(equals='ü™™ –û –Ω–∞—Å'))
async def send_mess_help(message: types.Message):
    await message.answer(text=DESCRIPTION, parse_mode='HTML')
    await message.delete()


@dp.message_handler(Text(equals='üìû–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'))
async def send_mess_help(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
    await message.delete()


@dp.message_handler(Text(equals='üõí–ö–æ—Ä–∑–∏–Ω–∞'))
async def oformiti_zakaz(message: types.Message):
    user_id = message.from_user.id
    global vibrannii_tovar, rev_luks
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    products = get_products_from_cart(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if not products:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")
        await message.delete()
    else:
        # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        message_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        summa = 0
        ves = 0
        for i, product in enumerate(products, start=1):
            message_text += f"{i}. {product['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–ò–º—è']}\n\t –°—Ç–æ–∏–º–æ—Å—Ç—å: {product['–¶–µ–Ω–∞']}‚ÇΩ/—à—Ç\n\n"
            summa += float(product['–¶–µ–Ω–∞'])
            ves += float(product['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–í–µ—Å(–∫–≥)'])
        else:
            message_text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {str(summa)} ‚ÇΩ\n–û–±—â–∏–π –≤–µ—Å: {str(ves)} –∫–≥"
        await message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        await message.answer_photo(photo='https://img.lovepik.com/free-png/20210918/lovepik-shopping-cart-png-image_400246975_wh1200.png', caption=message_text, reply_markup=ikb_ready_to_buy)
    


@dp.message_handler(Text(equals='–í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç'))
async def send_mess_help(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
    await message.answer(text='–ú–µ–Ω—é FAQ:', reply_markup=ikb_faq)
    await message.delete()



@dp.message_handler(content_types=types.ContentType.TEXT, regexp='—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞')
async def handle_santekhnika(message: types.Message):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(text='–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤ –≤ –¥–æ–º–µ –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ, —Ö–æ—Ç–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?')


@dp.message_handler(lambda message: message.text.lower() == '–¥–∞')
async def get_private_chat(message: types.Message):
    await bot.send_message(message.from_user.id, '–û–ø–∏—Å–∞–Ω–∏–µ/ –†–µ–∫–ª–∞–º–∞.  –§–û–†–ú–ê–¢ –µ—â–µ –æ–±–¥—É–º—ã–≤–∞–µ—Ç—Å—è')


@dp.callback_query_handler(lambda c: c.data == 'oformiti_zakaz')
async def proverka_ozn_recomand(callback: types.CallbackQuery):
    await callback.message.edit_media(InputMedia(media='https://korolev.clinic/wp-content/uploads/2020/03/photo_2020-03-17_18-29-15.jpg',
                                                type='photo',
                                                caption='‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–í–ê–ñ–ù–û‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–≥–æ –ª—é–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ—ë–º–∞'),
                                        reply_markup=ikb_oformiti_zakaz)  
    


@dp.callback_query_handler(lambda c: c.data == 'buy')
async def buy_product(callback: types.CallbackQuery):
    await callback.message.edit_media(InputMedia(media='https://ru-static.z-dn.net/files/d28/2612fb5a49be38d39e1ada7fe046c9c6.jpg',
                                                type='photo',
                                                caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Ñ–æ—Ç–æ'),
                                        reply_markup=ikb_buy)  




@dp.callback_query_handler(lambda c: c.data == 'mm')
async def back_to_main_menu(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open('media/photo_2023-03-09_22-37-54.jpg', 'rb') as photo_logo:
        await callback.message.edit_media(InputMedia(media=photo_logo,
                                                     type='photo'),
                                                     reply_markup=ikb_main_menu)
    

@dp.callback_query_handler(lambda c: c.data == 'rev_luk')
async def show_rev_luk(callback: types.CallbackQuery):
    global current_photo_index
    current_photo_index = 0
    with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
        await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption=captions_photos_razmeri[current_photo_index]),
                                            reply_markup=ikb_rev_luke)   
    




@dp.callback_query_handler(lambda c: c.data == 'san_uzel')
async def show_san_uzel(callback: types.CallbackQuery):
    await callback.message.edit_media(InputMedia(media='https://praktikd.ru/application/includes/uploadIMG/276.png',
                                                 type='photo',),
                                                 reply_markup=ikb_san_uzel)

    
@dp.callback_query_handler(lambda c: c.data == 'last_var')
async def show_last_photo(callback: types.CallbackQuery):
    global current_photo_index
    if current_photo_index == 0:
        current_photo_index = len(arr_photos_razmeri) - 1
    else:
        current_photo_index -= 1
    with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
        await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption=captions_photos_razmeri[current_photo_index]),
                                                reply_markup=ikb_rev_luke)
    

@dp.callback_query_handler(lambda c: c.data == 'next_var')
async def show_next_photo(callback: types.CallbackQuery):
    global current_photo_index
    if current_photo_index == len(arr_photos_razmeri) - 1:
        current_photo_index = 0
    else:
        current_photo_index += 1
    with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
        await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption=captions_photos_razmeri[current_photo_index]),
                                                reply_markup=ikb_rev_luke)



@dp.callback_query_handler(lambda c: c.data == 'faq_ikb')
async def show_imm_faq(callback: types.CallbackQuery):
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ–¥–∏—è –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    await callback.message.edit_media(InputMedia(media='https://cdn.searchenginejournal.com/wp-content/uploads/2022/07/faq-632c0874710c1-sej.png',
                                                type='photo',
                                                caption='–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã'),
                                                reply_markup=ikb_faq)
    

@dp.callback_query_handler(lambda c: c.data == 'recomanded_rl')
async def recomanded_text(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    curr_photo_recomanded_index = 0
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                        reply_markup=ikb_recomanded_rl)  
    
@dp.callback_query_handler(lambda c: c.data == 'last_rec_photo_rl')
async def show_last_photo(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    if curr_photo_recomanded_index == 0:
        curr_photo_recomanded_index = len(photo_recomanded) - 1
    else:
        curr_photo_recomanded_index -= 1
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                            reply_markup=ikb_recomanded_rl)
    

@dp.callback_query_handler(lambda c: c.data == 'next_rec_photo_rl')
async def show_next_photo(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    if curr_photo_recomanded_index == len(photo_recomanded) - 1:
        curr_photo_recomanded_index = 0
    else:
        curr_photo_recomanded_index += 1
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                            reply_markup=ikb_recomanded_rl)

@dp.callback_query_handler(lambda c: c.data == 'recomanded_b')
async def recomanded_text(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    curr_photo_recomanded_index = 0
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                        reply_markup=ikb_recomanded_buy)  
    
@dp.callback_query_handler(lambda c: c.data == 'last_rec_photo_b')
async def show_last_photo(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    if curr_photo_recomanded_index == 0:
        curr_photo_recomanded_index = len(photo_recomanded) - 1
    else:
        curr_photo_recomanded_index -= 1
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                            reply_markup=ikb_recomanded_buy)
    

@dp.callback_query_handler(lambda c: c.data == 'next_rec_photo_b')
async def show_next_photo(callback: types.CallbackQuery):
    global curr_photo_recomanded_index
    if curr_photo_recomanded_index == len(photo_recomanded) - 1:
        curr_photo_recomanded_index = 0
    else:
        curr_photo_recomanded_index += 1
    await callback.message.edit_media(InputMedia(media=photo_recomanded[curr_photo_recomanded_index],
                                                type='photo'),
                                            reply_markup=ikb_recomanded_buy)



@dp.callback_query_handler(lambda c: c.data == 'vibrati')
async def vibran_razmer(callback: types.CallbackQuery):
    global current_photo_index
    global arr_photos_razmeri
    if current_photo_index == 0:
        with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
            await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ª—é–∫–∞'),
                                                    reply_markup=ikb_small_luke)
    elif current_photo_index == 1:
        with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
            await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ª—é–∫–∞'),
                                                    reply_markup=ikb_midle_luke)
    elif current_photo_index == 2:
        with open(arr_photos_razmeri[current_photo_index], 'rb') as video_razmera:
            await callback.message.edit_media(InputMediaVideo(media=video_razmera,
                                                    type='photo',
                                                    caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ª—é–∫–∞'),
                                                    reply_markup=ikb_big_luke)



@dp.callback_query_handler(lambda c: c.data == '3d_project')
async def pokazati_3d_project(callback: types.CallbackQuery):
    global vibrannii_tovar
    with open(rev_luks[vibrannii_tovar]['–ú–µ–¥–∏–∞'].get('3D–ü—Ä–æ–µ–∫—Ç'), 'rb') as curr_gif_url:
        caption = f"{rev_luks[vibrannii_tovar]['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–ò–º—è']}\n\t{rev_luks[vibrannii_tovar]['–¶–µ–Ω–∞']}‚ÇΩ/—à—Ç"
        await callback.message.edit_media(InputMediaVideo(media=curr_gif_url,
                                                             caption=caption),
                                            reply_markup=ikb_vibrati_var)


@dp.callback_query_handler(lambda c: c.data == 'gotovie_raboti')
async def pokazati_3d_project(callback: types.CallbackQuery):
    global vibrannii_tovar
    curr_photo_url = rev_luks[vibrannii_tovar]['–ú–µ–¥–∏–∞'].get('–ì–æ—Ç–æ–≤–æ–µ')
    caption = f"{rev_luks[vibrannii_tovar]['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–ò–º—è']}\n\t{rev_luks[vibrannii_tovar]['–¶–µ–Ω–∞']}‚ÇΩ/—à—Ç"
    await callback.message.edit_media(InputMedia(media=curr_photo_url,
                                                 type='photo',
                                                 caption=caption),
                                        reply_markup=ikb_vibrati_var)
    

@dp.callback_query_handler(lambda c: c.data == 'harakteristiki')
async def pokazati_3d_project(callback: types.CallbackQuery):
    global vibrannii_tovar
    curr_photo_url = rev_luks[vibrannii_tovar]['–ú–µ–¥–∏–∞'].get('–ß–µ—Ä—Ç—ë–∂')
    caption = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
    for key, value in rev_luks[vibrannii_tovar]['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'].items():
        caption += f"‚ñ™Ô∏è \t{key}: {value}\n"
    await callback.message.edit_media(InputMedia(media=curr_photo_url,
                                                 type='photo',
                                                 caption=caption),
                                      reply_markup=ikb_vibrati_var)
    

@dp.callback_query_handler(lambda c: c.data == 'chertej')
async def show_rev_luk(callback: types.CallbackQuery):
    global curr_photo_shema_index
    global vibrannii_tovar
    curr_photo_shema_index = 0
    await callback.message.edit_media(InputMedia(media=photo_shema[curr_photo_shema_index],
                                                type='photo'),
                                        reply_markup=ikb_chertej)



@dp.callback_query_handler(lambda c: c.data == 'back_to_vv')
async def pokazati_3d_project(callback: types.CallbackQuery):
    global vibrannii_tovar
    curr_photo_url = rev_luks[vibrannii_tovar]['–ú–µ–¥–∏–∞'].get('–ß–µ—Ä—Ç—ë–∂')
    caption = f"{rev_luks[vibrannii_tovar]['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–ò–º—è']}\n\t{rev_luks[vibrannii_tovar]['–¶–µ–Ω–∞']}‚ÇΩ/—à—Ç"
    await callback.message.edit_media(InputMedia(media=curr_photo_url,
                                                 type='photo',
                                                 caption=caption),
                                      reply_markup=ikb_vibrati_var)

    
@dp.callback_query_handler(lambda c: c.data == 'dalee')
async def show_next_photo(callback: types.CallbackQuery):
    global curr_photo_shema_index
    if curr_photo_shema_index == len(photo_shema) - 1:
        curr_photo_shema_index = 0
    else:
        curr_photo_shema_index += 1
    await callback.message.edit_media(InputMedia(media=photo_shema[curr_photo_shema_index],
                                                type='photo'),
                                            reply_markup=ikb_chertej)
    
@dp.callback_query_handler(lambda c: c.data == 'obratno')
async def show_next_photo(callback: types.CallbackQuery):
    global curr_photo_shema_index
    if curr_photo_shema_index == len(photo_shema) - 1:
        curr_photo_shema_index = 0
    else:
        curr_photo_shema_index -= 1
    await callback.message.edit_media(InputMedia(media=photo_shema[curr_photo_shema_index],
                                                type='photo'),
                                            reply_markup=ikb_chertej)

@dp.callback_query_handler(lambda c: c.data == 'dobaviti_v_korzinu')
async def dob_v_korzinu(callback: types.CallbackQuery):
    global vibrannii_tovar, korzina
    korzina.append(rev_luks[vibrannii_tovar])
    await callback.answer('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ')


@dp.callback_query_handler(lambda c: c.data == 'udal_iz_korz')
async def udaliti_iz_korzini(callback: types.CallbackQuery):
    global korzina
    korzina = []
    with open('media/photo_2023-03-09_22-37-54.jpg', 'rb') as photo_logo:
        await callback.message.edit_media(InputMedia(media=photo_logo,
                                                     type='photo'),
                                                     reply_markup=ikb_main_menu)
    await callback.answer('‚úÖ–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖ')

##############################################################################################################
@dp.callback_query_handler(lambda c: c.data in ['200x200', '200x300', '300x300', '300x400', '300x500', '300x600', '400x200', '400x300',
                                                '400x400', '400x500', '400x600', '400x700', '400x800', '400x700', '400x800', '400x900',
                                                '400x1000', '400x1200', '500x300', '500x400', '500x500', '500x600', '500x700', '500x800',
                                                '500x900', '500x1000', '500x1100', '500x1200', '600x300','600x400', '600x500', '600x600',
                                                '600x700', '600x800', '600x900', '600x1000', '600x1100', '600x1200'])
async def rev_luks_200x200(callback: types.CallbackQuery):
    global rev_luks, vibrannii_tovar
    vibrannii_tovar = callback.data
    caption = f"{rev_luks[vibrannii_tovar]['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']['–ò–º—è']}\n\t{rev_luks[vibrannii_tovar]['–¶–µ–Ω–∞']}‚ÇΩ/—à—Ç"
    curr_photo_url = rev_luks[vibrannii_tovar]['–ú–µ–¥–∏–∞'].get('–§–æ—Ç–æ')
    await callback.message.edit_media(InputMedia(media=curr_photo_url,
                                                 type='photo',
                                                 caption=caption),
                                                 reply_markup=ikb_vibrati_var)






##############################################################################################################





# @dp.callback_query_handler(lambda c: c.data == 'otpraviti_zakaz')
# async def order(callback_query: types.CallbackQuery):
#     bot = dp.bot
#     message = callback_query.message
#     await bot.send_invoice(chat_id=message.chat.id,
#                            title='–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç',
#                            description='–ü—Ä–æ–±—É–µ–º –æ–ø–ª–∞—Ç—É',
#                            payload='–ò–Ω—Ñ–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
#                            provider_token='381764678:TEST:53130',
#                            currency='rub',
#                            prices=LabeledPrice(label='–î–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
#                                                amount=15000),
#                             start_parameter='parametr_start',
#                             provider_data=None,
#                             photo_url='https://htstatic.imgsmail.ru/pic_image/b35d56a4ee75c0ffd021c7b0f8088a8a/840/359/1911653/',
#                             photo_size=100,
#                             photo_width=800,
#                             photo_height=450,
#                             need_name=True,
#                             need_phone_number=True,
#                             need_email=True,
#                             need_shipping_address=True,
#                             send_phone_number_to_provider=False,
#                             send_email_to_provider=False,
#                             is_flexible=False,
#                             disable_notification=False,
#                             protect_content=False,
#                             reply_to_message_id=None,
#                             allow_sending_without_reply=True,
#                             reply_markup=ikb_oplata,
#                             request_timeout=15)


# @dp.pre_checkout_query_handler(lambda c: c.data == 'oplatiti')
# async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
#     await bot.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_query, ok=True)


# async def successful_payment(message: Message):
#     msg = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency}.'
#     await message.answer(msg)


executor.start_polling(dp, on_startup=start_on, skip_updates=True)